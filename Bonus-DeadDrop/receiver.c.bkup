#include"util.h"
// mman library to be used for hugepage allocations (e.g. mmap or posix_memalign only)
#include <sys/mman.h>

#define L1_SIZE (32 * 1024)
#define L2_SIZE (256 * 1024)
#define LINE_SIZE 64

#define PRIME_BUF (2 * L2_SIZE)
#define SENSITIVITY 60
#define BUFF_SIZE (256 * 1024)

int main(int argc, char **argv)
{
    // [Bonus] TODO: Put your covert channel setup code here
    
    // Create a hugepage for eviction

    // Allocate a buffer using huge page
    // See the handout for details about hugepage management
    void *buf= mmap(NULL, BUFF_SIZE, PROT_READ | PROT_WRITE, MAP_POPULATE |
                    MAP_ANONYMOUS | MAP_PRIVATE | MAP_HUGETLB, -1, 0);
    
    if (buf == (void*) - 1) {
        perror("mmap() error\n");
        exit(EXIT_FAILURE);
    }
    // The first access to a page triggers overhead associated with
    // page allocation, TLB insertion, etc.
    // Thus, we use a dummy write here to trigger page allocation
    // so later access will not suffer from such overhead.
    *((char *)buf) = 1; // dummy write to trigger page allocation

    void *new_ptr = (buf + (1 << 19)) & 0xfffffff8000;
	
    printf("Please press enter.\n");

    char text_buf[2];
    fgets(text_buf, sizeof(text_buf), stdin);

    printf("Receiver now listening.\n");

    bool listening = true;
    int i;
    while (listening) {

        // [Bonus] TODO: Put your covert channel code here
        for (i = 255; i >= 0; i--) {
            if (measure_one_block_access_time((uint64_t)(new_ptr + (i << 9))) > SENSITIVITY) {
                listening = false;
                break;
            }
        }
    }

    // Go through L2 and find any sets that take a while to get back
    // With the current setup, we want to access anything 

    printf("%d\n", i);

    printf("Receiver finished.\n");
    return 0;
}


